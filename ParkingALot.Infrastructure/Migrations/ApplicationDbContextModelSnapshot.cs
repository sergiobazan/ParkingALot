// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkingALot.Infrastructure;

#nullable disable

namespace ParkingALot.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkingALot.Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelledOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_on_utc");

                    b.Property<DateTime?>("CompletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_on_utc");

                    b.Property<DateTime>("CreatedOneUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_one_utc");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<Guid>("ParkingLotId")
                        .HasColumnType("uuid")
                        .HasColumnName("parking_lot_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_bookings_driver_id");

                    b.HasIndex("ParkingLotId")
                        .HasDatabaseName("ix_bookings_parking_lot_id");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("ParkingALot.Domain.Bookings.BookingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.HasKey("Id")
                        .HasName("pk_booking_items");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_booking_items_booking_id");

                    b.HasIndex("ServiceId")
                        .IsUnique()
                        .HasDatabaseName("ix_booking_items_service_id");

                    b.ToTable("booking_items", (string)null);
                });

            modelBuilder.Entity("ParkingALot.Domain.Drivers.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer")
                        .HasColumnName("total_points");

                    b.HasKey("Id")
                        .HasName("pk_drivers");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_drivers_email");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("ParkingALot.Domain.Drivers.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<DateOnly>("Year")
                        .HasColumnType("date")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_vehicles_driver_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("ParkingALot.Domain.ParkingLotOwners.ParkingLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_at_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("OpenAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_at_utc");

                    b.Property<Guid>("ParkingLotOwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("parking_lot_owner_id");

                    b.HasKey("Id")
                        .HasName("pk_parking_lots");

                    b.HasIndex("ParkingLotOwnerId")
                        .HasDatabaseName("ix_parking_lots_parking_lot_owner_id");

                    b.ToTable("parking_lots", (string)null);
                });

            modelBuilder.Entity("ParkingALot.Domain.ParkingLotOwners.ParkingLotOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_parking_lot_owners");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_parking_lot_owners_email");

                    b.ToTable("parking_lot_owners", (string)null);
                });

            modelBuilder.Entity("ParkingALot.Domain.ParkingLotOwners.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ParkingLotId")
                        .HasColumnType("uuid")
                        .HasColumnName("parking_lot_id");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.HasIndex("ParkingLotId")
                        .HasDatabaseName("ix_services_parking_lot_id");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("ParkingALot.Domain.Bookings.Booking", b =>
                {
                    b.HasOne("ParkingALot.Domain.Drivers.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_drivers_driver_id");

                    b.HasOne("ParkingALot.Domain.ParkingLotOwners.ParkingLot", null)
                        .WithMany()
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_parking_lots_parking_lot_id");

                    b.OwnsOne("ParkingALot.Domain.Shared.Money", "PointsDiscount", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("points_discount_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("points_discount_currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fk_bookings_bookings_id");
                        });

                    b.OwnsOne("ParkingALot.Domain.Shared.Money", "PriceForPeriod", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_for_period_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_for_period_currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fk_bookings_bookings_id");
                        });

                    b.OwnsOne("ParkingALot.Domain.Shared.Money", "ServicesPrice", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("services_price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("services_price_currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fk_bookings_bookings_id");
                        });

                    b.OwnsOne("ParkingALot.Domain.Shared.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("total_price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("total_price_currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fk_bookings_bookings_id");
                        });

                    b.OwnsOne("ParkingALot.Domain.Bookings.DateRange", "Range", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("range_end");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("range_start");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fk_bookings_bookings_id");
                        });

                    b.Navigation("PointsDiscount")
                        .IsRequired();

                    b.Navigation("PriceForPeriod")
                        .IsRequired();

                    b.Navigation("Range")
                        .IsRequired();

                    b.Navigation("ServicesPrice")
                        .IsRequired();

                    b.Navigation("TotalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingALot.Domain.Bookings.BookingItem", b =>
                {
                    b.HasOne("ParkingALot.Domain.Bookings.Booking", null)
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booking_items_bookings_booking_id");

                    b.HasOne("ParkingALot.Domain.ParkingLotOwners.Service", null)
                        .WithOne()
                        .HasForeignKey("ParkingALot.Domain.Bookings.BookingItem", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booking_items_service_service_id");

                    b.OwnsOne("ParkingALot.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("BookingItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_currency");

                            b1.HasKey("BookingItemId");

                            b1.ToTable("booking_items");

                            b1.WithOwner()
                                .HasForeignKey("BookingItemId")
                                .HasConstraintName("fk_booking_items_booking_items_id");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingALot.Domain.Drivers.Vehicle", b =>
                {
                    b.HasOne("ParkingALot.Domain.Drivers.Driver", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_drivers_driver_id");
                });

            modelBuilder.Entity("ParkingALot.Domain.ParkingLotOwners.ParkingLot", b =>
                {
                    b.HasOne("ParkingALot.Domain.ParkingLotOwners.ParkingLotOwner", null)
                        .WithMany("ParkingLots")
                        .HasForeignKey("ParkingLotOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parking_lots_parking_lot_owner_parking_lot_owner_id");

                    b.OwnsOne("ParkingALot.Domain.ParkingLotOwners.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ParkingLotId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.HasKey("ParkingLotId");

                            b1.ToTable("parking_lots");

                            b1.WithOwner()
                                .HasForeignKey("ParkingLotId")
                                .HasConstraintName("fk_parking_lots_parking_lots_id");
                        });

                    b.OwnsOne("ParkingALot.Domain.Shared.Money", "PricePerHour", b1 =>
                        {
                            b1.Property<Guid>("ParkingLotId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_per_hour_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_per_hour_currency");

                            b1.HasKey("ParkingLotId");

                            b1.ToTable("parking_lots");

                            b1.WithOwner()
                                .HasForeignKey("ParkingLotId")
                                .HasConstraintName("fk_parking_lots_parking_lots_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("PricePerHour")
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingALot.Domain.ParkingLotOwners.Service", b =>
                {
                    b.HasOne("ParkingALot.Domain.ParkingLotOwners.ParkingLot", null)
                        .WithMany("Services")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_parking_lots_parking_lot_id");

                    b.OwnsOne("ParkingALot.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_currency");

                            b1.HasKey("ServiceId");

                            b1.ToTable("services");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId")
                                .HasConstraintName("fk_services_services_id");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingALot.Domain.Bookings.Booking", b =>
                {
                    b.Navigation("BookingItems");
                });

            modelBuilder.Entity("ParkingALot.Domain.Drivers.Driver", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ParkingALot.Domain.ParkingLotOwners.ParkingLot", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("ParkingALot.Domain.ParkingLotOwners.ParkingLotOwner", b =>
                {
                    b.Navigation("ParkingLots");
                });
#pragma warning restore 612, 618
        }
    }
}
